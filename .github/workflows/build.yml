name: Build

on: [push]

env:
  MSVC_DEV_CMD_ARCH: x86
  CMAKE_ARCH: Win32
  DEBUG_BUILD_TYPE: Debug
  DEBUG_BUILD_DIRNAME: build_debug
  RELEASE_BUILD_TYPE: Release
  RELEASE_BUILD_DIRNAME: build_release
  BOOST_INSTALL_DIR: ${{github.workspace}}/boost

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{env.MSVC_DEV_CMD_ARCH}}

      - name: Restore Boost cache
        uses: actions/cache@v2
        id: cache-boost
        with:
          path: ${{env.BOOST_INSTALL_DIR}}
          key: boost

      - name: Install boost
        if: steps.cache-boost.outputs.cache-hit != 'true'
        uses: MarkusJx/install-boost@v1.0.1
        id: install-boost
        with:
          boost_version: 1.73.0
          toolset: msvc14.2
          boost_install_dir: ${{env.BOOST_INSTALL_DIR}}

      - name: Create Debug Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/${{env.DEBUG_BUILD_DIRNAME}}

      - name: Configure CMake for Debug Build
        shell: bash
        working-directory: ${{runner.workspace}}/${{env.DEBUG_BUILD_DIRNAME}}
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{env.DEBUG_BUILD_TYPE}} -A ${{env.CMAKE_ARCH}}
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

      - name: Build Debug
        working-directory: ${{runner.workspace}}/${{env.DEBUG_BUILD_DIRNAME}}
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $DEBUG_BUILD_TYPE

      - name: Test Debug Build
        working-directory: ${{runner.workspace}}/${{env.DEBUG_BUILD_DIRNAME}}
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C $DEBUG_BUILD_TYPE

      - name: "Upload Debug Artifact"
        uses: actions/upload-artifact@v2
        with:
          name: devtale-core-debug
          path: |
            ${{runner.workspace}}/${{env.DEBUG_BUILD_DIRNAME}}/${{env.DEBUG_BUILD_TYPE}}/devtale-core.dll
            ${{runner.workspace}}/${{env.DEBUG_BUILD_DIRNAME}}/${{env.DEBUG_BUILD_TYPE}}/devtale-core.pdb

      - name: Create Release Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/${{env.RELEASE_BUILD_DIRNAME}}

      - name: Configure CMake for Release Build
        shell: bash
        working-directory: ${{runner.workspace}}/${{env.RELEASE_BUILD_DIRNAME}}
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{env.RELEASE_BUILD_TYPE}} -A ${{env.CMAKE_ARCH}}
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
          
      - name: Build Release
        working-directory: ${{runner.workspace}}/${{env.RELEASE_BUILD_DIRNAME}}
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $RELEASE_BUILD_TYPE

      - name: Test Release Build
        working-directory: ${{runner.workspace}}/${{env.RELEASE_BUILD_DIRNAME}}
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C $RELEASE_BUILD_TYPE

      - name: "Upload Release Artifact"
        uses: actions/upload-artifact@v2
        with:
          name: devtale-core-release
          path: ${{runner.workspace}}/${{env.RELEASE_BUILD_DIRNAME}}/${{env.RELEASE_BUILD_TYPE}}/devtale-core.dll
